// Test schema for SQLite compatibility
// This is a version of the main schema adapted for SQLite with string-based enums

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-test"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String @id @default(cuid())
  telegramId       String @unique
  username         String?
  firstName        String?
  lastName         String?
  role             String @default("user")
  isActive         Boolean @default(true)
  isVerified       Boolean @default(false)
  lastActivityAt   DateTime?
  telegramUsername String?
  phoneNumber      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  reviews         Review[]
  photos          Photo[]
  notifications   Notification[]
  rateLimits      RateLimit[]
  userSessions    UserSession[]
  adminActions    AdminAction[]

  @@map("users")
}

model Client {
  id          String @id @default(cuid())
  name        String
  phone       String @unique
  telegramId  String?
  description String?
  status      String @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  reviews Review[]
  photos  Photo[]

  @@map("clients")
}

model ClientProfile {
  id          String @id @default(cuid())
  name        String
  phone       String @unique
  telegramId  String?
  description String?
  status      String @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("client_profiles")
}

model Review {
  id          String @id @default(cuid())
  clientId    String
  userId      String
  rating      Int
  text        String?
  isAnonymous Boolean @default(false)
  status      String @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Photo {
  id               String @id @default(cuid())
  clientId         String
  userId           String
  clientProfileId  String?
  fileId           String @unique
  fileName         String?
  mimeType         String?
  fileSize         Int?
  url              String?
  status           String @default("active")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Notification {
  id        String @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String @default("general")
  isRead    Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RateLimit {
  id          String @id @default(cuid())
  userId      String
  action      String
  attempts    Int @default(1)
  windowStart DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, action, windowStart])
  @@map("rate_limits")
}

model BotConfig {
  id          String @id @default(cuid())
  key         String @unique
  value       String?
  isSensitive Boolean @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bot_configs")
}

model BotConfiguration {
  id          String @id @default(cuid())
  key         String @unique
  value       String?
  isSensitive Boolean @default(false)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bot_configurations")
}

model UserSession {
  id        String @id @default(cuid())
  userId    String
  sessionId String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AdminAction {
  id          String @id @default(cuid())
  userId      String
  action      String
  targetType  String?
  targetId    String?
  description String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_actions")
}

model AIAnalysis {
  id          String @id @default(cuid())
  type        String
  targetType  String
  targetId    String
  data        String // JSON as string
  confidence  Float?
  status      String @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([targetType, targetId, type])
  @@map("ai_analyses")
}
